# docker-compose.yml

services:
  db:
    image: postgres:15
    container_name: nba-db-dev
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mysecretpw}
      POSTGRES_DB: ${POSTGRES_DB:-nba_mcp_dev}
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - monitoring

  app:
    build:
      context: .
      args:
        APP_ENV: ${APP_ENV:-development}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"   # main FastAPI
      - "8001:8001"   # Claude transport
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
    env_file:
      - .env.${APP_ENV:-development}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: on-failure
    networks:
      - monitoring
    command: >
      uvicorn app.main:app
      --host 0.0.0.0
      --port 8000
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    restart: always
    networks:
      - monitoring
    depends_on:                           # <-- added
      app:
        condition: service_started

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    restart: always
    networks:
      - monitoring

networks:
  monitoring:
    name: monitoring
    driver: bridge
    attachable: true

volumes:
  db-data:
  grafana-storage:
